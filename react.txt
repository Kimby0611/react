jsx >> A syntax extention to JavaScript.
자바스크립트의 확장 문법, JavaScript와 HTML/CSS를합친 것

Router >> Router>Routes>Route로 태그 들어감
Route path-'/~~' element={<~~/>} 형식으로 라우트 작성


*****Props*****
컴포넌트의 속성
읽기 전용 >> 값 변경 불가능
다른 props의 값으로 엘리먼트를 생성하기 위해선 새로운 값을 컴포넌트에 전달하여 새로 엘리먼트를 생성하면 됨.
컴포넌트 간 데이터 전달하는 핵심 메커니즘


*****react의 생명주기*****
마운트, 업데이트, 언마운트의 생명 주기가 있음
마운트 >> 컴포넌트가 DOM에 처음 추가될 때
업데이트 >> 상태나 속성이 변경되어 컴포넌트가 다시 렌더링 될 때
언마운트 >> 컴포넌트가 DOM에서 제거될 때


*****hook*****
훅은 최상위에서만 호출 가능 (조건문, 반복문 등의 함수 내에서 사용 불가)

useState() >> 컴포넌트의 상태 관리 >> 여기서 상태란 컴포넌트가 렌더링에 사용할 수 있는 동적인 데이터
const[변수명, 변수를 동적으로 처리할 함수명(set변수명)] = useState(처음 렌더링 될 때의 값 ex) "", null, 어떠한 데이터)

useEffect() >> useEffect는 컴포넌트의 생명 주기를 관리하기 위해서 사용함

useMemo() >> Memoized value를 리턴하는 훅
이전 계산의 결과를 기억해 두어 컴포넌트가 리렌더링될 때 특정 계산을 반복하지 않도록 해 줌

useCallback() >> 함수를 재사용, 자식 컴포넌트에 props로 함수를 전달할 때 사용

useRef() >> 참조를 생성하고 유지 .current 속성을 통해 값을 저장 리렌더링 시에도 유지

useContext() >> 전역 상태 관리를 위해 사용할
				createContext로 공유 상자를 만듦 >> Xxx.Provider로 상자에 데이터 넣기 >> useContext로 꺼내서 사용